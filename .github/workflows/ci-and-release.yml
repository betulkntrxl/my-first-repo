name: CI/Release Workflow

on:
  push:
    branches:
      - '**'

env:
  DOCKER_REGISTRY: "mck-dwa-mobile.jfrog.io"
  IMAGE_NAME: "mck-dwa-mobile.jfrog.io/${{ github.event.repository.name }}"
  PRISMA_USER:  ${{ secrets.PRISMA_USER }}
  PRISMA_PASSWORD:  ${{ secrets.PRISMA_PASSWORD }}

jobs:
  build_and_push:
    name: Build, Test, Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version-bump-git-tag.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: |
            yarn.lock
            server/yarn.lock

      - name: Install dependencies for UI
        run: yarn install --frozen-lockfile

      - name: Install dependencies for server
        run: |
            ( cd server ; yarn install --frozen-lockfile )

      - name: Lint/Format checks
        run: yarn lint:check && yarn prettier:check

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Run tests
        run: CI=true yarn test --max-workers ${{ steps.cpu-cores.outputs.count }} --coverage .

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run build
        run: CI=true yarn cloud-build

      - name: Generate short SHA
        uses: benjlevesque/short-sha@v2.2
        id: short-sha
        with:
          length: 7

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to JFrog Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DWA_JFROG_USERNAME }}
          password: ${{ secrets.DWA_JFROG_API_KEY }}
          registry: ${{ env.DOCKER_REGISTRY }}

      - name: Docker build image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.short-sha.outputs.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:${{ steps.short-sha.outputs.sha }}
          cache-to: type=inline
          load: true

      - id: scan-docker-image
        name: Scan docker image
        run: |
          curl -u $PRISMA_USER:$PRISMA_PASSWORD --output twistcli https://us-east1.cloud.twistlock.com/us-2-158257908/api/v1/util/twistcli && chmod +x twistcli && mv twistcli /tmp/
          /tmp/twistcli images scan --details --address https://us-east1.cloud.twistlock.com/us-2-158257908 --user $PRISMA_USER --password $PRISMA_PASSWORD $IMAGE_NAME

      - if: github.ref == 'refs/heads/main'
        id: version-bump-git-tag
        name: Bump version and push git tag
        uses: anothrNick/github-tag-action@1.67.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - if: github.ref == 'refs/heads/main'
        name: Push docker image
        run: |
          docker tag $IMAGE_NAME:${{ steps.short-sha.outputs.sha }} $IMAGE_NAME:${{ steps.version-bump-git-tag.outputs.new_tag }}
          docker push $IMAGE_NAME:${{ steps.version-bump-git-tag.outputs.new_tag}}

      - if: github.ref == 'refs/heads/main'
        name: Create Prerelease
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          tag: ${{ steps.version-bump-git-tag.outputs.new_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - if: failure()
        name: Failure Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: '#EF3D35'
          SLACK_TITLE: CI Pipeline for ${{ github.event.repository.name }}
          SLACK_MESSAGE: CI Pipeline Failed!!!

      - if: success()
        name: Success Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: '#69F054'
          SLACK_TITLE: CI Pipeline for ${{ github.event.repository.name }}
          SLACK_MESSAGE: CI Pipeline Success!!!
